#include <Servo.h>

// ESC/Thruster Settings
static const int MAX_THROTTLE = 400; // Value between 0-400
static const int CENTER_THROTTLE = 1500;

// Arduino Pins
static const byte Joystick1 = A0; // Joystick Y-axis (motor 1)
static const byte Joystick2 = A1; // Joystick Z-axis (motor 2)
static const byte THRUSTER_LEFT = 7;
static const byte THRUSTER_RIGHT = 6;
static const byte THRUSTER_UP = 8;
static const byte THRUSTER_DOWN = 9;  // Changed to pin 9 for thrusterDown

// Buttons
static const byte BUTTON_3 = A2;  // Connect Button 3 to A2
static const byte BUTTON_4 = A3;  // Connect Button 4 to A3

// Servos
Servo thrusterLeft;
Servo thrusterRight;
Servo thrusterUp;
Servo thrusterDown;

void setup() {
  // Set up serial port to print inputs and outputs (optional)
  Serial.begin(38400);

  // Set up Arduino pins to send servo signals to ESCs
  thrusterLeft.attach(THRUSTER_LEFT);
  thrusterRight.attach(THRUSTER_RIGHT);
  thrusterUp.attach(THRUSTER_UP);
  thrusterDown.attach(THRUSTER_DOWN);

  // Set output signal to 1500 microsecond pulse (stopped command)
  thrusterLeft.writeMicroseconds(CENTER_THROTTLE);
  thrusterRight.writeMicroseconds(CENTER_THROTTLE);
  thrusterUp.writeMicroseconds(CENTER_THROTTLE);
  thrusterDown.writeMicroseconds(CENTER_THROTTLE);

  // Delay to allow time for ESCs to initialize
  delay(7000);
}

void loop() {
  // Read the joysticks and use the Arduino "map" function to map the raw values
  // to the desired output commands.
  int motor1Command = map(analogRead(Joystick1), 0, 1023, -MAX_THROTTLE, MAX_THROTTLE);
  int motor2Command = map(analogRead(Joystick2), 0, 1023, -MAX_THROTTLE, MAX_THROTTLE);

  // Calculate forward and turn commands for left and right thrusters
  int forwardCommand = (motor1Command + motor2Command) / 2;
  int backCommand = (motor1Command - motor2Command) / 2;

  // Check if Button 3 is pressed, set thrusterUp to max throttle
  if (digitalRead(BUTTON_3) == HIGH) {
    thrusterUp.writeMicroseconds(CENTER_THROTTLE + MAX_THROTTLE);
  } else {
    thrusterUp.writeMicroseconds(CENTER_THROTTLE);
  }

  // Check if Button 4 is pressed, set thrusterDown to max throttle
  if (digitalRead(BUTTON_4) == HIGH) {
    thrusterDown.writeMicroseconds(CENTER_THROTTLE + MAX_THROTTLE);
  } else {
    thrusterDown.writeMicroseconds(CENTER_THROTTLE);
  }

  // Combine the "stopped" command with forward, turn, and vertical (if applicable)
  // and send to the ESCs.
  thrusterLeft.writeMicroseconds(CENTER_THROTTLE + forwardCommand + backCommand);
  thrusterRight.writeMicroseconds(CENTER_THROTTLE + forwardCommand - backCommand);

  // Output via serial
  Serial.print("Fwd: "); Serial.print(forwardCommand);
  Serial.print("                Back: "); Serial.print(backCommand);
  Serial.println("");

  // Delay 1/10th of a second. No need to update at super fast rates.
  delay(100);
}
