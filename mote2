
#include <Servo.h>

// Joystick Settings
static const int JS_CENTER_0 = 511; // Analog reading at center, 0-1023
static const int JS_CENTER_1 = 511; // Analog reading at center, 0-1023
static const int JS_CENTER_2 = 511; // Analog reading at center, 0-1023
static const int JS_RANGE_0 = 128; // Analog range, 0-1023
static const int JS_RANGE_1 = 128; // Analog range, 0-1023
static const int JS_RANGE_2 = 128; // Analog range, 0-1023
static const int JS_DIR_0 = 1; // +1 or -1
static const int JS_DIR_1 = 1; // +1 or -1
static const int JS_DIR_2 = 1; // +1 or -1

// ESC/Thruster Settings
static const int MAX_FWD_REV_THROTTLE = 400; // Value between 0-400
static const int MAX_TURN_THROTTLE = 400; // Value between 0-400
static const int MAX_VERTICAL_THROTTLE = 400; // Value between 0-400
static const int CENTER_THROTTLE = 1500;

// Arduino Pins
static const byte JS_ADC_1 = A1; // Joystick Y-axis (motor 1)
static const byte JS_ADC_2 = A3; // Joystick Z-axis (motor 2)
static const byte THRUSTER_LEFT = 7;
static const byte THRUSTER_RIGHT = 6;
static const byte THRUSTER_VERTICAL = 9;

// Servos
Servo thrusterLeft;
Servo thrusterRight;
Servo thrusterVertical;

void setup() {
  // Set up serial port to print inputs and outputs (optional)
  Serial.begin(38400);

  // Set up Arduino pins to send servo signals to ESCs
  thrusterLeft.attach(THRUSTER_LEFT);
  thrusterRight.attach(THRUSTER_RIGHT);
  thrusterVertical.attach(THRUSTER_VERTICAL);

  // Set output signal to 1500 microsecond pulse (stopped command)
  thrusterLeft.writeMicroseconds(CENTER_THROTTLE);
  thrusterRight.writeMicroseconds(CENTER_THROTTLE);
  thrusterVertical.writeMicroseconds(CENTER_THROTTLE);

  // Delay to allow time for ESCs to initialize
  delay(7000);
}

void loop() {
  // Read the joysticks and use the Arduino "map" function to map the raw values
  // to the desired output commands.
  int motor1Command = map(analogRead(JS_ADC_1), // Read motor 1 joystick value
                           0, // Joystick low value
                           1023, // Joystick high value
                           -MAX_FWD_REV_THROTTLE, // Command low value (adjust if needed)
                           MAX_FWD_REV_THROTTLE); // Command high value (adjust if needed)

  int motor2Command = map(analogRead(JS_ADC_2), // Read motor 2 joystick value
                           0, // Joystick low value
                           1023, // Joystick high value
                           -MAX_FWD_REV_THROTTLE, // Command low value (adjust if needed)
                           MAX_FWD_REV_THROTTLE); // Command high value (adjust if needed)

  // Calculate forward and turn commands for left and right thrusters
  // (adjust based on your desired motor configuration and behavior)
  int forwardCommand = (motor1Command + motor2Command) / 2;
  int turnCommand = (motor1Command - motor2Command) / 2;

  // Combine the "stopped" command with forward, turn, and vertical (if applicable)
  // and send to the ESCs.
  thrusterLeft.writeMicroseconds(CENTER_THROTTLE + forwardCommand + turnCommand);
  thrusterRight.writeMicroseconds(CENTER_THROTTLE + forwardCommand - turnCommand);
//  thrusterVertical.writeMicroseconds(CENTER_THROTTLE+verticalCommand);

  // Output via serial
  Serial.print("Fwd: "); Serial.print(forwardCommand);
  Serial.print("                Turn: "); Serial.print(turnCommand);
//  Serial.print("                Vert: "); Serial.print(verticalCommand);
  Serial.println("");

  // Delay 1/10th of a second. No need to update at super fast rates.
  delay(100);
}
